###################    Microservices    ###################
services:
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./user-service:/code
    depends_on:
      - broker
      - user_database
    ports:
      - "8006:8006"

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./product-service:/code
    depends_on:
      - broker
      - product_database
    ports:
      - "8007:8007"

  payment-service:
   build:
     context: ./payment-service
     dockerfile: Dockerfile.dev
   volumes:
    - ./payment-service:/code
   depends_on:
    - broker
    - payment_database
   ports:
    - "8008:8008"

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./order-service:/code
    depends_on:
      - broker
      - order_database
    ports:
      - "8009:8009"

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./notification-service:/code
    depends_on:
      - broker
      - notification_database
    ports:
      - "8010:8010"

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./inventory-service:/code
    depends_on:
      - broker
      - inventory_database
    ports:
      - "8011:8011"

###################    Microservices Database    ###################

  user_database:
    image: postgres:latest
    restart: always
    container_name: user_db_cont
    environment:
      - POSTGRES_USER=rajaanas
      - POSTGRES_PASSWORD=user_12
      - POSTGRES_DB=userdatabase
    ports:
      - '5436:5432'
    volumes:
      - user_database:/var/lib/postgresql/data

  product_database:
    image: postgres:latest  
    restart: always 
    container_name: product_db_cont
    environment:
      - POSTGRES_USER=rajaanas
      - POSTGRES_PASSWORD=product_34
      - POSTGRES_DB=productdatabase
    ports:
      - '5437:5432'
    volumes:
      - product_database:/var/lib/postgresql/data

  payment_database:
    image: postgres:latest
    restart: always
    container_name: payment_db_cont
    environment:
    - POSTGRES_USER=rajaanas
    - POSTGRES_PASSWORD=payment_50
    - POSTGRES_DB=paymentdatabase
    ports:
    - '5438:5432'
    volumes:
    - payment_database:/var/lib/postgresql/data
  
  order_database:
    image: postgres:latest
    restart: always
    container_name: order_db_cont
    environment:
      - POSTGRES_USER=rajaanas
      - POSTGRES_PASSWORD=order_56
      - POSTGRES_DB=orderdatabase
    ports:
      - '5439:5432'
    volumes:
      - order_database:/var/lib/postgresql/data

  notification_database:
    image: postgres:latest
    restart: always
    container_name: notification_db_cont
    environment:
      - POSTGRES_USER=rajaanas
      - POSTGRES_PASSWORD=notification_56
      - POSTGRES_DB=notificationdatabase
    ports:
      - '5440:5432'
    volumes:
      - notification_database:/var/lib/postgresql/data

  inventory_database:
    image: postgres:latest
    restart: always
    container_name: inventory_db_cont
    environment:
      - POSTGRES_USER=rajaanas
      - POSTGRES_PASSWORD=inventory_78
      - POSTGRES_DB=inventorydatabase
    ports:
      - '5441:5432'
    volumes:
      - inventory_database:/var/lib/postgresql/data
  
###################  Kakfa Broker & UI  ###################

  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker

################### Kong API Gateway ###################

  # kong:
  #   image: kong:3.0.0
  #   container_name: kong
  #   ports:
  #     - "8000:8000"   # Proxy port
  #     - "8001:8001"   # Admin port
  #   environment:
  #     KONG_DATABASE: "off"
  #     KONG_PROXY_LISTEN: "0.0.0.0:8000"
  #     KONG_ADMIN_LISTEN: "0.0.0.0:8001"
  #   depends_on:
  #     - kong-migrations

  # kong-migrations:
  #   image: kong:3.0.0
  #   container_name: kong-migrations
  #   command: "kong migrations bootstrap"
  #   depends_on:
  #     - broker

################### Volumes & Network ###################

volumes:
  user_database:
    driver: local
  product_database:
    driver: local
  payment_database:
    driver: local
  order_database:
    driver: local
  notification_database:
    driver: local
  inventory_database:
    driver: local

networks:
  default:
    driver: bridge